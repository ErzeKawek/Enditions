buildscript {
    dependencies {
        classpath 'org.kohsuke:github-api:1.114'
    }
}

plugins {
    id 'idea'
    id 'eclipse'
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
}
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group
def local_bclib = findProject(':BCLib') != null
def local_wunderlib = findProject(':WunderLib') != null

loom {
    interfaceInjection {
        // When enabled injected interfaces from dependecies will be applied.
        enableDependencyInterfaceInjection = true
    }
    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.strict-validation"
            vmArg "-Dfabric-api.datagen.modid=edenring"
            runDir "build/datagen"
        }
    }
}

sourceSets {
    main {
        // Add the datagenned files into the jar.
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

repositories {
    maven { url "https://maven.dblsaiko.net/" }
    maven { url "https://maven.fabricmc.net/" }
    maven { url 'https://maven.blamejared.com' }
    maven { url "https://maven.shedaniel.me/" }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.terraformersmc.com/releases' }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    flatDir {
        dirs 'libs'
    }
}
dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    println "Using local BCLib: ${local_bclib}"
    if (local_bclib){
        implementation( project(path:":BCLib", configuration: 'dev') )
    } else {
        modImplementation "maven.modrinth:BCLib:${project.bclib_version}"
    }

    if (local_wunderlib) {
        implementation project(path: ":WunderLib", configuration: 'dev')
        include project(path: ":WunderLib", configuration: 'dev')
    } else {
        modImplementation "com.github.quiqueck:WunderLib:1.30.1"
//        modApi "com.github.quiqueck:WunderLib"
//        include "com.github.quiqueck:WunderLib"
    }
}

def useOptional(String dep) {
    dependencies.modRuntime(dep) {
        exclude group: 'net.fabricmc.fabric-api'
        exclude group: 'net.fabricmc'
        if (!dep.contains("me.shedaniel")) {
            exclude group: 'me.shedaniel.cloth'
            exclude group: 'me.shedaniel'
        }
    }
    dependencies.modCompileOnly(dep) {
        exclude group: 'net.fabricmc.fabric-api'
        exclude group: 'net.fabricmc'
        if (!dep.contains("me.shedaniel")) {
            exclude group: 'me.shedaniel.cloth'
            exclude group: 'me.shedaniel'
        }
    }
}
def useApi(String dep) {
    dependencies.modApi(dep) {
        exclude group: 'net.fabricmc.fabric-api'
        exclude group: 'net.fabricmc'
        exclude group: 'com.terraformersmc'
        if (!dep.contains("me.shedaniel")) {
            exclude group: 'me.shedaniel.cloth'
            exclude group: 'me.shedaniel'
        }
    }
}
processResources {
    inputs.property "version", project.version
    duplicatesStrategy = 'WARN'
    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}
// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    it.options.release = 17
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}
jar {
    from "LICENSE"
}
artifacts {
    archives sourcesJar
}
def env = System.getenv()